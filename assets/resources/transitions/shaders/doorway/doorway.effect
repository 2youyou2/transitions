// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
CCEffect %{
  commonPass: &commonPass
    vert: vs
    blendState:
      targets:
      - blend: true
    rasterizerState:
      cullMode: none
    properties:
      texture: { value: white }
      texture2: { value: white }
      time: { value: 0 }
      ratio: { value: 0 }

      reflection: { value: 0.4 }
      perspective: { value: 0.4 }
      depth: { value: 3 }
  techniques:
  - name: horizontal
    passes:
    - <<: *commonPass
      frag: horizontal-fs
  - name: vertical
    passes:
    - <<: *commonPass
      frag: vertical-fs
}%

CCProgram transition %{

float progress = time;

uniform Transition {
  float reflection; // = 0.4
  float perspective; // = 0.4
  float depth; // = 3
};
// author: gre
// License: MIT 

const vec4 black = vec4(0.0, 0.0, 0.0, 1.0);
const vec2 boundMin = vec2(0.0, 0.0);
const vec2 boundMax = vec2(1.0, 1.0);

bool inBounds (vec2 p) {
  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));
}

vec2 project (vec2 p) {
  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);
}

vec4 bgColor (vec2 p, vec2 pto) {
  vec4 c = black;
  pto = project(pto);
  if (inBounds(pto)) {
    c += mix(black, getToColor(pto), reflection * mix(1.0, 0.0, pto.y));
  }
  return c;
}

 vec4 transition (vec2 p) {
  vec2 pfr = vec2(-1.), pto = vec2(-1.);
  door(pfr, pto, p, progress, perspective, depth);
  if (inBounds(pfr)) {
    return getFromColor(pfr);
  }
  else if (inBounds(pto)) {
    return getToColor(pto);
  }
  else {
    return bgColor(p, pto);
  }
}

}%

CCProgram vs %{

precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in lowp vec4 a_color;

in mediump vec2 a_uv0;
out mediump vec2 v_uv0;

out lowp vec4 v_color;

void main () {
  mat4 mvp;
  
  mvp = cc_matViewProj;

  v_uv0 = a_uv0;
  v_color = a_color;

  gl_Position = mvp * vec4(a_position, 1);
}

}%

CCProgram common-fs %{

uniform sampler2D texture;
uniform sampler2D texture2;
in mediump vec2 v_uv0;

uniform Time {
  float time;
  float ratio;
};

in lowp vec4 v_color;

vec4 getFromColor(vec2 uv) {
  return texture(texture, uv);
}

vec4 getToColor(vec2 uv) {
  return texture(texture2, uv);
}

#include <transition>

void main () {
  gl_FragColor = v_color * transition(v_uv0);
}

}%

CCProgram horizontal-fs %{
  precision highp float;

  void door (inout vec2 pfr, inout vec2 pto, vec2 p, float progress, float perspective, float depth) {
    float middleSlit = 2.0 * abs(p.x-0.5) - progress;
    if (middleSlit > 0.0) {
      pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);
      float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));
      pfr.y -= d/2.;
      pfr.y *= d;
      pfr.y += d/2.;
    }
    float size = mix(1.0, depth, 1.-progress);
    pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);
  }

  #include <common-fs>
}%

CCProgram vertical-fs %{
  precision highp float;

  void door (inout vec2 pfr, inout vec2 pto, vec2 p, float progress, float perspective, float depth) {
    float middleSlit = 2.0 * abs(p.y-0.5) - progress;
    if (middleSlit > 0.0) {
      pfr = p + (p.y > 0.5 ? -1.0 : 1.0) * vec2(0.0, 0.5*progress);
      float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));
      pfr.x -= d/2.;
      pfr.x *= d;
      pfr.x += d/2.;
    }
    float size = mix(1.0, depth, 1.-progress);
    pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);
  }

  #include <common-fs>
}%
