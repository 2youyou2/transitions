{
  "ver": "1.0.25",
  "uuid": "b238f1e5-8d61-46f3-a79f-f98193bf3ff3",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nvec2 ripple (vec2 uv, vec2 dif, float m, float PI_2) {\n  float theta = atan(dif.y, dif.x);\n  float pulse = sin(m*PI_2);\n  vec2 pulse_rect = vec2(pulse * cos(theta), pulse * sin(theta));\n  uv += 0.1 * pulse_rect;\n  return uv;\n}\nuniform sampler2D texture;\nuniform sampler2D texture2;\nvarying mediump vec2 v_uv0;\nuniform float time;\nuniform float ratio;\nvarying lowp vec4 v_color;\nvec4 getFromColor(vec2 uv) {\n  return texture2D(texture, uv);\n}\nvec4 getToColor(vec2 uv) {\n  return texture2D(texture2, uv);\n}\nuniform vec2 center;\nconst float smoothness = 0.15;\nconst float PI = 3.141592653589793;\nconst float PI_2 = PI * 2.0;\nfloat maxDistance = max(\n  max(distance(center, vec2(0., 0.)), distance(center, vec2(1., 1.))),\n  max(distance(center, vec2(0., 1.)), distance(center, vec2(1., 0.)))\n);\nvec2 ratio2 = vec2(1.0, 1.0 / ratio);\nvec4 transition (vec2 uv) {\n  vec2 dif = (uv - center) * ratio2;\n  float r = length(dif);\n  float m = 1. - smoothstep(-smoothness, 0.0, r - time*(maxDistance+smoothness));\n  uv = ripple(uv, dif, m, PI_2);\n  return mix(getFromColor(uv), getToColor(uv), m);\n}\nvoid main () {\n  gl_FragColor = v_color * transition(v_uv0);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin lowp vec4 a_color;\nin mediump vec2 a_uv0;\nout mediump vec2 v_uv0;\nout lowp vec4 v_color;\nvoid main () {\n  mat4 mvp;\n  mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position, 1);\n}",
        "frag": "\nprecision highp float;\nvec2 ripple (vec2 uv, vec2 dif, float m, float PI_2) {\n  float theta = atan(dif.y, dif.x);\n  float pulse = sin(m*PI_2);\n  vec2 pulse_rect = vec2(pulse * cos(theta), pulse * sin(theta));\n  uv += 0.1 * pulse_rect;\n  return uv;\n}\nuniform sampler2D texture;\nuniform sampler2D texture2;\nin mediump vec2 v_uv0;\nuniform Time {\n  float time;\n  float ratio;\n};\nin lowp vec4 v_color;\nvec4 getFromColor(vec2 uv) {\n  return texture(texture, uv);\n}\nvec4 getToColor(vec2 uv) {\n  return texture(texture2, uv);\n}\nuniform Transition {\n  vec2 center;\n};\nconst float smoothness = 0.15;\nconst float PI = 3.141592653589793;\nconst float PI_2 = PI * 2.0;\nfloat maxDistance = max(\n  max(distance(center, vec2(0., 0.)), distance(center, vec2(1., 1.))),\n  max(distance(center, vec2(0., 1.)), distance(center, vec2(1., 0.)))\n);\nvec2 ratio2 = vec2(1.0, 1.0 / ratio);\nvec4 transition (vec2 uv) {\n  vec2 dif = (uv - center) * ratio2;\n  float r = length(dif);\n  float m = 1. - smoothstep(-smoothness, 0.0, r - time*(maxDistance+smoothness));\n  uv = ripple(uv, dif, m, PI_2);\n  return mix(getFromColor(uv), getToColor(uv), m);\n}\nvoid main () {\n  gl_FragColor = v_color * transition(v_uv0);\n}"
      }
    }
  ],
  "subMetas": {}
}